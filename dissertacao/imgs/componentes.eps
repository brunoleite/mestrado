%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 591 406
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Thursday, April 18, 2013 4:57:38 PM BRT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
591 406 setpagesize
0 0 0 0 setmargins
0 0 setorigin
591 406 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
591.000 0.00000 l
591.000 406.000 l
0.00000 406.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 591 406 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 218.000 -224.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
-218.000 224.000 m
373.000 224.000 l
373.000 630.000 l
-218.000 630.000 l
-218.000 224.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 218.000 -224.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 218.000 -224.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 218.000 -224.000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 1.00000 1.00000 RG
newpath
37.0000 365.000 m
37.0000 373.284 30.2843 380.000 22.0000 380.000  c
13.7157 380.000 7.00000 373.284 7.00000 365.000  c
7.00000 356.716 13.7157 350.000 22.0000 350.000  c
30.2843 350.000 37.0000 356.716 37.0000 365.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
20.2432 364.982 m
20.2432 368.186 l
22.1494 368.186 l
22.7848 368.186 23.2562 368.053 23.5635 367.787  c
23.8708 367.521 24.0244 367.118 24.0244 366.576  c
24.0244 366.024 23.8708 365.620 23.5635 365.365  c
23.2562 365.110 22.7848 364.982 22.1494 364.982  c
20.2432 364.982 l
h
20.2432 361.373 m
20.2432 364.014 l
21.9932 364.014 l
22.5765 364.014 23.0088 363.904 23.2900 363.686  c
23.5713 363.467 23.7119 363.139 23.7119 362.701  c
23.7119 362.253 23.5713 361.920 23.2900 361.701  c
23.0088 361.482 22.5765 361.373 21.9932 361.373  c
20.2432 361.373 l
h
19.0557 360.404 m
22.0869 360.404 l
22.9932 360.404 23.6885 360.592 24.1729 360.967  c
24.6572 361.342 24.8994 361.873 24.8994 362.561  c
24.8994 363.102 24.7744 363.532 24.5244 363.850  c
24.2744 364.167 23.9098 364.363 23.4307 364.436  c
24.0140 364.561 24.4671 364.821 24.7900 365.217  c
25.1130 365.613 25.2744 366.107 25.2744 366.701  c
25.2744 367.482 25.0088 368.087 24.4775 368.514  c
23.9463 368.941 23.1859 369.154 22.1963 369.154  c
19.0557 369.154 l
19.0557 360.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
37.0000 365.000 m
37.0000 373.284 30.2843 380.000 22.0000 380.000  c
13.7157 380.000 7.00000 373.284 7.00000 365.000  c
7.00000 356.716 13.7157 350.000 22.0000 350.000  c
30.2843 350.000 37.0000 356.716 37.0000 365.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
102.000 530.000 m
102.000 538.284 95.2843 545.000 87.0000 545.000  c
78.7157 545.000 72.0000 538.284 72.0000 530.000  c
72.0000 521.716 78.7157 515.000 87.0000 515.000  c
95.2843 515.000 102.000 521.716 102.000 530.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
87.0049 526.576 m
85.3955 530.920 l
88.6143 530.920 l
87.0049 526.576 l
h
86.3330 525.404 m
87.6768 525.404 l
91.0049 534.154 l
89.7705 534.154 l
88.9736 531.904 l
85.0361 531.904 l
84.2393 534.154 l
82.9893 534.154 l
86.3330 525.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
102.000 530.000 m
102.000 538.284 95.2843 545.000 87.0000 545.000  c
78.7157 545.000 72.0000 538.284 72.0000 530.000  c
72.0000 521.716 78.7157 515.000 87.0000 515.000  c
95.2843 515.000 102.000 521.716 102.000 530.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
-79.4167 530.000 m
-79.4167 538.284 -86.1324 545.000 -94.4167 545.000  c
-102.701 545.000 -109.417 538.284 -109.417 530.000  c
-109.417 521.716 -102.701 515.000 -94.4167 515.000  c
-86.1324 515.000 -79.4167 521.716 -79.4167 530.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
-95.0143 525.404 m
-93.8268 525.404 l
-93.8268 533.545 l
-93.8268 534.597 -94.0273 535.363 -94.4284 535.842  c
-94.8294 536.321 -95.4727 536.561 -96.3581 536.561  c
-96.8112 536.561 l
-96.8112 535.561 l
-96.4362 535.561 l
-95.9154 535.561 -95.5482 535.415 -95.3346 535.123  c
-95.1211 534.831 -95.0143 534.305 -95.0143 533.545  c
-95.0143 525.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
-79.4167 530.000 m
-79.4167 538.284 -86.1324 545.000 -94.4167 545.000  c
-102.701 545.000 -109.417 538.284 -109.417 530.000  c
-109.417 521.716 -102.701 515.000 -94.4167 515.000  c
-86.1324 515.000 -79.4167 521.716 -79.4167 530.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
168.000 313.000 m
168.000 321.284 161.284 328.000 153.000 328.000  c
144.716 328.000 138.000 321.284 138.000 313.000  c
138.000 304.716 144.716 298.000 153.000 298.000  c
161.284 298.000 168.000 304.716 168.000 313.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
150.739 309.373 m
150.739 316.186 l
152.177 316.186 l
153.385 316.186 154.268 315.912 154.825 315.365  c
155.382 314.818 155.661 313.951 155.661 312.764  c
155.661 311.597 155.382 310.740 154.825 310.193  c
154.268 309.646 153.385 309.373 152.177 309.373  c
150.739 309.373 l
h
149.552 308.404 m
151.989 308.404 l
153.687 308.404 154.932 308.756 155.724 309.459  c
156.515 310.162 156.911 311.264 156.911 312.764  c
156.911 314.274 156.513 315.383 155.716 316.092  c
154.919 316.800 153.677 317.154 151.989 317.154  c
149.552 317.154 l
149.552 308.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
168.000 313.000 m
168.000 321.284 161.284 328.000 153.000 328.000  c
144.716 328.000 138.000 321.284 138.000 313.000  c
138.000 304.716 144.716 298.000 153.000 298.000  c
161.284 298.000 168.000 304.716 168.000 313.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
-88.6667 422.750 m
-88.6667 431.034 -95.3824 437.750 -103.667 437.750  c
-111.951 437.750 -118.667 431.034 -118.667 422.750  c
-118.667 414.466 -111.951 407.750 -103.667 407.750  c
-95.3824 407.750 -88.6667 414.466 -88.6667 422.750  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
-104.264 418.154 m
-103.077 418.154 l
-103.077 426.904 l
-104.264 426.904 l
-104.264 418.154 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
-88.6667 422.750 m
-88.6667 431.034 -95.3824 437.750 -103.667 437.750  c
-111.951 437.750 -118.667 431.034 -118.667 422.750  c
-118.667 414.466 -111.951 407.750 -103.667 407.750  c
-95.3824 407.750 -88.6667 414.466 -88.6667 422.750  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
334.000 600.000 m
334.000 608.284 327.284 615.000 319.000 615.000  c
310.716 615.000 304.000 608.284 304.000 600.000  c
304.000 591.716 310.716 585.000 319.000 585.000  c
327.284 585.000 334.000 591.716 334.000 600.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
321.491 602.904 m
321.491 600.561 l
319.554 600.561 l
319.554 599.576 l
322.663 599.576 l
322.663 603.342 l
322.205 603.665 321.702 603.910 321.155 604.076  c
320.608 604.243 320.022 604.326 319.397 604.326  c
318.022 604.326 316.950 603.925 316.179 603.123  c
315.408 602.321 315.022 601.212 315.022 599.795  c
315.022 598.357 315.408 597.240 316.179 596.443  c
316.950 595.646 318.022 595.248 319.397 595.248  c
319.960 595.248 320.499 595.318 321.015 595.459  c
321.530 595.600 322.007 595.805 322.444 596.076  c
322.444 597.342 l
322.007 596.967 321.541 596.686 321.046 596.498  c
320.551 596.311 320.033 596.217 319.491 596.217  c
318.418 596.217 317.614 596.516 317.077 597.115  c
316.541 597.714 316.272 598.607 316.272 599.795  c
316.272 600.972 316.541 601.860 317.077 602.459  c
317.614 603.058 318.418 603.357 319.491 603.357  c
319.908 603.357 320.280 603.321 320.608 603.248  c
320.937 603.175 321.231 603.061 321.491 602.904  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
334.000 600.000 m
334.000 608.284 327.284 615.000 319.000 615.000  c
310.716 615.000 304.000 608.284 304.000 600.000  c
304.000 591.716 310.716 585.000 319.000 585.000  c
327.284 585.000 334.000 591.716 334.000 600.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
-172.667 501.750 m
-172.667 510.034 -179.382 516.750 -187.667 516.750  c
-195.951 516.750 -202.667 510.034 -202.667 501.750  c
-202.667 493.466 -195.951 486.750 -187.667 486.750  c
-179.382 486.750 -172.667 493.466 -172.667 501.750  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
-190.429 497.154 m
-189.242 497.154 l
-189.242 500.857 l
-185.320 497.154 l
-183.789 497.154 l
-188.132 501.232 l
-183.476 505.904 l
-185.039 505.904 l
-189.242 501.686 l
-189.242 505.904 l
-190.429 505.904 l
-190.429 497.154 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
-172.667 501.750 m
-172.667 510.034 -179.382 516.750 -187.667 516.750  c
-195.951 516.750 -202.667 510.034 -202.667 501.750  c
-202.667 493.466 -195.951 486.750 -187.667 486.750  c
-179.382 486.750 -172.667 493.466 -172.667 501.750  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
322.000 328.000 m
322.000 336.284 315.284 343.000 307.000 343.000  c
298.716 343.000 292.000 336.284 292.000 328.000  c
292.000 319.716 298.716 313.000 307.000 313.000  c
315.284 313.000 322.000 319.716 322.000 328.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
302.995 323.404 m
304.761 323.404 l
306.995 329.357 l
309.245 323.404 l
311.011 323.404 l
311.011 332.154 l
309.854 332.154 l
309.854 324.467 l
307.589 330.467 l
306.401 330.467 l
304.151 324.467 l
304.151 332.154 l
302.995 332.154 l
302.995 323.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
322.000 328.000 m
322.000 336.284 315.284 343.000 307.000 343.000  c
298.716 343.000 292.000 336.284 292.000 328.000  c
292.000 319.716 298.716 313.000 307.000 313.000  c
315.284 313.000 322.000 319.716 322.000 328.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
358.000 409.000 m
358.000 417.284 351.284 424.000 343.000 424.000  c
334.716 424.000 328.000 417.284 328.000 409.000  c
328.000 400.716 334.716 394.000 343.000 394.000  c
351.284 394.000 358.000 400.716 358.000 409.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
340.721 404.404 m
345.752 404.404 l
345.752 405.404 l
341.908 405.404 l
341.908 407.982 l
345.377 407.982 l
345.377 408.982 l
341.908 408.982 l
341.908 413.154 l
340.721 413.154 l
340.721 404.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
358.000 409.000 m
358.000 417.284 351.284 424.000 343.000 424.000  c
334.716 424.000 328.000 417.284 328.000 409.000  c
328.000 400.716 334.716 394.000 343.000 394.000  c
351.284 394.000 358.000 400.716 358.000 409.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
255.000 485.000 m
255.000 493.284 248.284 500.000 240.000 500.000  c
231.716 500.000 225.000 493.284 225.000 485.000  c
225.000 476.716 231.716 470.000 240.000 470.000  c
248.284 470.000 255.000 476.716 255.000 485.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
237.381 480.404 m
242.912 480.404 l
242.912 481.404 l
238.568 481.404 l
238.568 483.998 l
242.740 483.998 l
242.740 484.982 l
238.568 484.982 l
238.568 488.154 l
243.021 488.154 l
243.021 489.154 l
237.381 489.154 l
237.381 480.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
255.000 485.000 m
255.000 493.284 248.284 500.000 240.000 500.000  c
231.716 500.000 225.000 493.284 225.000 485.000  c
225.000 476.716 231.716 470.000 240.000 470.000  c
248.284 470.000 255.000 476.716 255.000 485.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
3.33333 468.750 m
3.33333 477.034 -3.38240 483.750 -11.6667 483.750  c
-19.9509 483.750 -26.6667 477.034 -26.6667 468.750  c
-26.6667 460.466 -19.9509 453.750 -11.6667 453.750  c
-3.38240 453.750 3.33333 460.466 3.33333 468.750  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
-15.0065 464.154 m
-13.8190 464.154 l
-13.8190 467.748 l
-9.52213 467.748 l
-9.52213 464.154 l
-8.33463 464.154 l
-8.33463 472.904 l
-9.52213 472.904 l
-9.52213 468.732 l
-13.8190 468.732 l
-13.8190 472.904 l
-15.0065 472.904 l
-15.0065 464.154 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
3.33333 468.750 m
3.33333 477.034 -3.38240 483.750 -11.6667 483.750  c
-19.9509 483.750 -26.6667 477.034 -26.6667 468.750  c
-26.6667 460.466 -19.9509 453.750 -11.6667 453.750  c
-3.38240 453.750 3.33333 460.466 3.33333 468.750  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
255.000 254.000 m
255.000 262.284 248.284 269.000 240.000 269.000  c
231.716 269.000 225.000 262.284 225.000 254.000  c
225.000 245.716 231.716 239.000 240.000 239.000  c
248.284 239.000 255.000 245.716 255.000 254.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
237.829 249.404 m
239.017 249.404 l
239.017 257.154 l
243.282 257.154 l
243.282 258.154 l
237.829 258.154 l
237.829 249.404 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
255.000 254.000 m
255.000 262.284 248.284 269.000 240.000 269.000  c
231.716 269.000 225.000 262.284 225.000 254.000  c
225.000 245.716 231.716 239.000 240.000 239.000  c
248.284 239.000 255.000 245.716 255.000 254.000  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
139.000 421.000 m
139.000 429.284 132.284 436.000 124.000 436.000  c
115.716 436.000 109.000 429.284 109.000 421.000  c
109.000 412.716 115.716 406.000 124.000 406.000  c
132.284 406.000 139.000 412.716 139.000 421.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
127.545 417.076 m
127.545 418.326 l
127.139 417.951 126.712 417.673 126.264 417.490  c
125.816 417.308 125.337 417.217 124.826 417.217  c
123.826 417.217 123.061 417.524 122.529 418.139  c
121.998 418.753 121.732 419.639 121.732 420.795  c
121.732 421.941 121.998 422.821 122.529 423.436  c
123.061 424.050 123.826 424.357 124.826 424.357  c
125.337 424.357 125.816 424.264 126.264 424.076  c
126.712 423.889 127.139 423.613 127.545 423.248  c
127.545 424.482 l
127.128 424.764 126.688 424.975 126.225 425.115  c
125.761 425.256 125.274 425.326 124.764 425.326  c
123.430 425.326 122.383 424.920 121.623 424.107  c
120.863 423.295 120.482 422.191 120.482 420.795  c
120.482 419.389 120.863 418.279 121.623 417.467  c
122.383 416.654 123.430 416.248 124.764 416.248  c
125.285 416.248 125.777 416.318 126.240 416.459  c
126.704 416.600 127.139 416.805 127.545 417.076  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
139.000 421.000 m
139.000 429.284 132.284 436.000 124.000 436.000  c
115.716 436.000 109.000 429.284 109.000 421.000  c
109.000 412.716 115.716 406.000 124.000 406.000  c
132.284 406.000 139.000 412.716 139.000 421.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
27.4979 378.956 m
81.5021 516.044 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
35.9418 359.466 m
139.058 318.534 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
-102.378 437.695 m
-95.7056 515.055 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
-114.593 433.026 m
-176.740 491.474 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
-108.772 525.651 m
-173.311 506.099 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
320.870 585.117 m
341.130 423.883 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
101.390 525.768 m
225.610 489.232 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
310.507 587.636 m
248.493 497.364 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
159.770 326.385 m
233.230 471.615 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
330.930 417.906 m
252.070 476.094 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
-90.2503 429.458 m
-25.0831 462.042 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
-23.7232 477.674 m
-82.3601 521.076 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
250.068 265.119 m
296.932 316.881 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
328.022 409.821 m
138.978 420.179 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
91.8215 515.796 m
119.178 435.204 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
149.110 327.487 m
127.890 406.513 l
S
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
